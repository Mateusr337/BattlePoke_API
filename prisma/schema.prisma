// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @unique
  email    String @unique
  password String
  level    String @default("0")
  imageURL String

  PokemonUser PokemonUser[]
  BattleUser  BattleUser[]


  @@map("users")
}

model Pokemon {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  pokemonLevelId Int
  pokemonLevel   PokemonLevel @relation(fields: [pokemonLevelId], references: [id])
  life           Int
  attack         Int
  imageURL       String

  PokemonUser        PokemonUser[]
  PokemonTypePokemon PokemonTypePokemon[]
  PokemonBattle      PokemonBattle[]
  BattleUserPokemon  BattleUserPokemon[]
  @@map("pokemons")
}

model PokemonUser {
  id        Int     @id @default(autoincrement())
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  @@map("pokemonsUsers")
}

model PokemonLevel {
  id     Int    @id @default(autoincrement())
  name   String @unique
  number String @unique

  Pokemon Pokemon[]
  @@map("pokemonsLevels")
}

model PokemonType {
  id   Int    @id @default(autoincrement())
  name String @unique

  PokemonTypePokemon PokemonTypePokemon[]
  @@map("pokemonsTypes")
}

model PokemonTypePokemon {
  id            Int         @id @default(autoincrement())
  pokemonTypeId Int
  pokemonType   PokemonType @relation(fields: [pokemonTypeId], references: [id])
  pokemonId     Int
  pokemon       Pokemon     @relation(fields: [pokemonId], references: [id])

  @@map("pokemonsTypesPokemons")
}

model Battle {
  id       Int      @id @default(autoincrement())
  finished Boolean?

  BattleUser BattleUser[]
  @@map("battles")
}

model BattleUser {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  winner   Boolean?
  battleId Int
  battle   Battle   @relation(fields: [battleId], references: [id])

  BattleUserPokemon BattleUserPokemon[]
  @@map("battlesUsers")
}

model BattleUserPokemon {
  id           Int        @id @default(autoincrement())
  battleUserId Int
  battleUser   BattleUser @relation(fields: [battleUserId], references: [id])
  pokemonId    Int
  pokemon      Pokemon    @relation(fields: [pokemonId], references: [id])


  @@map("battlesUsersPokemons")
}

model PokemonBattle {
  id        Int     @id @default(autoincrement())
  level     Int
  pokemonId Int
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])

  @@map("pokemonsBattles")
}

model Session {
  id    Int    @id @default(autoincrement())
  token String @unique

  @@map("sessions")
}
